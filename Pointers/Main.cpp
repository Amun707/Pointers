//УКАЗАТЕЛИ
#include<iostream>

int main() {
	system("chcp 1251>nul");
	int n, m;

//Указатели и переменные
	n = 7;
	std::cout << "Адрес n = " << &n << std::endl;//&(амперсант) операция обращения к адресу элемента

	int* pn;//объявление указателя на память типа int
	double f = 5.5;
	double* pf;
	pn = &n;//присваивание указателю pn адреса переменной n
	std::cout << "pn = " << pn << std::endl;//вывод значения указателя
	std::cout << "*pn = " << *pn << std::endl;//*pn - разыменование(получение значения переменной через разыменование)
	std::cout << "n = " << n << std::endl;
	*pn = 15;//меняем значение переменной с помощью разыменования указателя
	std::cout << "Меняем переменную...\n";
	std::cout << "n = " << n << std::endl;
	m = 24;
	std::cout << "Адрес m = " << &m << std::endl;
	pn = &m;//перенаправление указателя на другую область памяти
	std::cout << "pn = " << pn << std::endl;
	std::cout << "*pn = " << *pn << std::endl;//24
	*pn = 28;
	std::cout << "Меняем переменную...\n";
	std::cout << "m = " << m << std::endl;//28

	int* pm = &m;//создание еще одного указателя на переменную m
	std::cout << "pm = " << pm << std::endl;

	//Указатели и массивы
	const int size = 5;
	int arr[size]{ 4, 6, 14, 7, 44 };
	//             0  1  2   3  4
	int* parr = &arr[2];
	std::cout << "*parr = "<< *parr << std::endl;//
	std::cout <<*(parr + 1) << std::endl;//получение элемента с индексом 3 с помощью арифметики указателей
	parr++;//перенаправление указателя на следующий элемент памяти
	std::cout << "*parr = " << *parr << std::endl;
	parr -= 3;//перенаправление указателя на три элемента памяти назад от его текущего направления
	std::cout << "*parr = " << *parr << std::endl;
	std::cout << "Вывод массива с использованием указателя parr:\n";
	for (int i = 0; i < size; i++)
		std::cout << *(parr + i) << ' ';
	std::cout << std::endl;

	std::cout << *arr << std::endl;//4
	//arr[0] => *(arr + 0);
	std::cout << "arr[1] = " << *(arr + 1) << std::endl;

	//arr = &n; - ошибка, так как arr - это константный указатель,
	//т.е. он не может быть перенаправлен на другие участки памяти
	//parr - можно делать всё

	return 0;
}